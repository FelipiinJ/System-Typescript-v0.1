import * as discord_js from 'discord.js';
import { GatewayIntentBits, Partials, Attachment, AttachmentBuilder, EmbedAssetData, Guild, GuildMember, User, ClientUser, ImageURLOptions, EmbedFooterData, APIEmbed, Embed, EmbedData, EmbedBuilder, ColorResolvable, AnyComponentBuilder, ActionRowBuilder, ButtonBuilder, LinkButtonComponentData, ChannelType, CommandInteractionOption, Client, ApplicationCommand, TextInputBuilder, ModalSubmitFields, Collection, TextInputComponent, TextInputComponentData, GuildEmoji, GuildTextBasedChannel, Message, Role } from 'discord.js';
export * from '@magicyan/core';

declare const chars: {
    invisible: string;
};

declare const CustomItents: {
    Messages: GatewayIntentBits[];
    Guild: GatewayIntentBits[];
    Other: GatewayIntentBits[];
    All: GatewayIntentBits[];
};
declare const CustomPartials: {
    All: Partials[];
};

declare function setMobileStatus(): void;

type EmbedPlusAssetData = string | Attachment | AttachmentBuilder | EmbedAssetData | undefined | null;
type EmbedAssetOptions = Omit<EmbedAssetData, "url">;
declare function createEmbedAsset(source: EmbedPlusAssetData, options?: EmbedAssetOptions): EmbedAssetData | undefined;

interface MemberAuthor {
    type: GuildMember;
    property?: "username" | "displayName" | "id" | "globalName" | "nickname";
}
interface UserAuthor {
    type: User | ClientUser;
    property?: "username" | "displayName" | "id" | "globalName";
}
interface GuildAuthor {
    type: Guild;
    property?: "name" | "id";
}
type AuthorOption = MemberAuthor | UserAuthor | GuildAuthor;
type AuthorType = Guild | GuildMember | User | ClientUser;
type CreateEmbedAuthorOptions<T extends AuthorType> = {
    iconURL?: string;
    url?: string | null;
    prefix?: string;
    suffix?: string;
} & ImageURLOptions & Omit<Extract<AuthorOption, {
    type: T;
}>, "type">;
declare function createEmbedAuthor<T extends AuthorType>(type: T, options?: CreateEmbedAuthorOptions<T>): {
    name: string;
    url: string | undefined;
    iconURL: string | undefined;
};

type EmbedPlusFieldData = {
    name: string;
    value: string;
    inline?: boolean;
};
type FieldPredicate = (field: EmbedPlusFieldData, index: number, obj: EmbedPlusFieldData[]) => boolean;
declare class EmbedPlusFields {
    private embed;
    private set fields(value);
    private get fields();
    constructor(embed: EmbedPlusBuilder);
    [Symbol.iterator](): {
        next(): IteratorResult<EmbedPlusFieldData>;
    };
    get length(): number;
    get record(): Record<string, string | undefined>;
    /**
     * Get a filed by index
     * @param name Field name
     */
    get(name: string): EmbedPlusFieldData | undefined;
    /**
     * Get a field by name
     * @param index Field index
     */
    get(index: number): EmbedPlusFieldData | undefined;
    find(predicate: FieldPredicate): EmbedPlusFieldData | undefined;
    push(...fields: EmbedPlusFieldData[]): void;
    set(...fields: EmbedPlusFieldData[]): void;
    map<U>(callback: (value: EmbedPlusFieldData, index: number, array: EmbedPlusFieldData[]) => U): U[];
    update(predicate: string | number | FieldPredicate, field: Partial<EmbedPlusFieldData>): boolean;
    delete(predicate: string | number | FieldPredicate): boolean;
    /**
     * Remove all fields
     */
    clear(): this;
    toArray(): EmbedPlusFieldData[];
    private getPredicateIndex;
}

type EmbedPlusFooterData = {
    text?: string | null;
    iconURL?: string | null;
};
declare function createEmbedFooter(options: EmbedPlusFooterData): EmbedFooterData | undefined;

type EmbedPlusColorData = string & {} | ColorResolvable | null;
type EmbedPlusAuthorData = {
    name: string;
    url?: string;
    iconURL?: string;
};
interface EmbedPlusData {
    title?: string | null;
    color?: EmbedPlusColorData | null;
    description?: string | null;
    url?: string | null;
    thumbnail?: EmbedPlusAssetData;
    image?: EmbedPlusAssetData;
    fields?: Partial<EmbedPlusFieldData>[] | null;
    timestamp?: string | number | Date | null;
    footer?: EmbedPlusFooterData;
    author?: EmbedPlusAuthorData;
}
type AnyEmbedData = APIEmbed | Embed | EmbedData;
interface MessageWithEmbeds {
    embeds: Array<Embed>;
}
interface InteractionWithEmbeds {
    message: MessageWithEmbeds;
}
interface EmbedPlusOptions extends EmbedPlusData {
    extends?: EmbedPlusData | AnyEmbedData | EmbedBuilder;
    mergeFields?: boolean;
}
declare class EmbedPlusBuilder extends EmbedBuilder {
    fields: EmbedPlusFields;
    constructor(data: EmbedPlusOptions);
    update(data: EmbedPlusData): this;
    has(property: keyof EmbedPlusData): boolean;
    toArray(): EmbedPlusBuilder[];
    toString(space?: number): string;
    setBorderColor(color: EmbedPlusColorData | null): this;
    setAsset(asset: "thumbnail" | "image", source: EmbedPlusAssetData): this;
    static fromInteraction(interaction: InteractionWithEmbeds, index?: number, data?: EmbedPlusData): EmbedPlusBuilder;
    static fromMessage(message: MessageWithEmbeds, index?: number, data?: EmbedPlusData): EmbedPlusBuilder;
}
type EmbedPlusProperty<P extends keyof EmbedPlusData> = EmbedPlusData[P];
interface CreateEmbedOptions<B extends boolean> extends EmbedPlusOptions {
    array?: B;
    interaction?: InteractionWithEmbeds;
}
type CreateEmbedReturn<B> = undefined extends B ? EmbedPlusBuilder : false extends B ? EmbedPlusBuilder : EmbedPlusBuilder[];
declare function createEmbed<B extends boolean>(options: CreateEmbedOptions<B>): CreateEmbedReturn<B>;

declare function createRow<Component extends AnyComponentBuilder>(...components: Component[]): ActionRowBuilder<Component>;
interface CreateLinkButtonData extends Omit<LinkButtonComponentData, "style" | "type"> {
}
declare function createLinkButton(data: CreateLinkButtonData): ButtonBuilder;

type GuildChannelType = Exclude<ChannelType, ChannelType.DM>;
type FindChannelFilter<T extends GuildChannelType> = (channel: GetChannelType<T>) => boolean;
type GetChannelType<Type extends GuildChannelType> = Extract<NonNullable<CommandInteractionOption<"cached">["channel"]>, {
    type: Type extends ChannelType.PublicThread | ChannelType.AnnouncementThread ? ChannelType.PublicThread | ChannelType.AnnouncementThread : Type;
}>;
declare function findChannel<Type extends GuildChannelType = ChannelType.GuildText>(guild: Guild, type?: Type): {
    byId(id: string): GetChannelType<Type> | undefined;
    byName(name: string, and?: FindChannelFilter<Type>): GetChannelType<Type> | undefined;
    byFilter(filter: FindChannelFilter<Type>): GetChannelType<Type> | undefined;
    inCategoryId(id: string): {
        byId(id: string): GetChannelType<Type> | undefined;
        byName(name: string, and?: FindChannelFilter<Type>): GetChannelType<Type> | undefined;
        byFilter(filter: FindChannelFilter<Type>): GetChannelType<Type> | undefined;
    };
    inCategoryName(name: string): {
        byId(id: string): GetChannelType<Type> | undefined;
        byName(name: string, and?: FindChannelFilter<Type>): GetChannelType<Type> | undefined;
        byFilter(filter: FindChannelFilter<Type>): GetChannelType<Type> | undefined;
    };
};
interface ChannelUrlInfo {
    channelId?: string;
    guildId?: string;
}
declare function getChannelUrlInfo(url: string): ChannelUrlInfo;

type FindCommandFilter = (command: ApplicationCommand) => boolean;
declare function findCommand(guildOrClient: Guild | Client<true>): {
    byName(name: string, and?: FindCommandFilter): ApplicationCommand<{
        guild: discord_js.GuildResolvable;
    }> | undefined;
    byId(id: string): ApplicationCommand<{
        guild: discord_js.GuildResolvable;
    }> | undefined;
    byFilter(filter: FindCommandFilter): ApplicationCommand<{
        guild: discord_js.GuildResolvable;
    }> | undefined;
};

type TextInputData = Omit<TextInputComponentData, "type">;
type CreateModalInputData = TextInputData;
declare function createModalInput(data: CreateModalInputData): ActionRowBuilder<TextInputBuilder>;
type ModalFieldsData = Record<string, Omit<TextInputData, "customId">>;
declare function createModalFields(data: ModalFieldsData): ActionRowBuilder<TextInputBuilder>[];
type ModalFieldsRecord<K extends string> = Record<K, string>;
declare function modalFieldsToRecord<K extends string = string>(fields: ModalSubmitFields | Collection<string, TextInputComponent>): ModalFieldsRecord<K>;

type FindEmojiFilter = (emoji: GuildEmoji) => boolean;
declare function findEmoji(guildOrClient: Guild | Client): {
    byName(name: string, animated?: boolean, and?: FindEmojiFilter): GuildEmoji | undefined;
    byId(id: string, animated?: boolean): GuildEmoji | undefined;
    byFilter(filter: FindEmojiFilter): GuildEmoji | undefined;
};

type FindMemberFilter = (member: GuildMember) => boolean;
declare function findMember(guild: Guild): {
    byGlobalName(globalName: string, and?: FindMemberFilter): GuildMember | undefined;
    byNickname(nickname: string, and?: FindMemberFilter): GuildMember | undefined;
    byUsername(username: string, and?: FindMemberFilter): GuildMember | undefined;
    byDisplayName(displayName: string, and?: FindMemberFilter): GuildMember | undefined;
    byId(id: string): GuildMember | undefined;
    byFilter(filter: FindMemberFilter): GuildMember | undefined;
};

type FindMessageFilter = (role: Message<true>) => boolean;
declare function findMessage(channel: GuildTextBasedChannel): {
    all(limit?: number): Promise<Message<boolean>[]>;
    byId(id: string): Message<true> | undefined;
    byContent(): {
        equals(content: string, ignoreCase?: boolean): Message<true> | undefined;
        include(content: string, ignoreCase?: boolean): Message<true> | undefined;
    };
    byFilter(filter: FindMessageFilter): Message<true> | undefined;
};
interface MessageUrlInfo {
    messageId?: string;
    channelId?: string;
    guildId?: string;
}
declare function getMessageUrlInfo(url: string): MessageUrlInfo;

type FindRoleFilter = (role: Role) => boolean;
/**
 *
 * @param guild Discord guild
 *
 * ```ts
 * const memberRole = findRole(guild).byName("Member");
 * const adminRole = findRole(guild).byHexColor("#ff5454");
 * const leaderRole = findRole(guild).byId("537818031728885771");
 * ```
 */
declare function findRole(guild: Guild): {
    byColor(color: number, and?: FindRoleFilter): Role | undefined;
    byHexColor(hexColor: string, and?: FindRoleFilter): Role | undefined;
    byName(name: string, and?: FindRoleFilter): Role | undefined;
    byId(id: string): Role | undefined;
    byFilter(filter: FindRoleFilter): Role | undefined;
};

/**
 *
 * @param mention Discord mentionable string
 * @returns mentionable id or null
 *
 * ```ts
 * const user = "<@264620632644255745>";
 * const channel = "<#1068689068256403457>";
 * const role = "<@&929925182796226632>";
 *
 * extractMentionId(user) // 264620632644255745
 * extractMentionId(channel) // 1068689068256403457
 * extractMentionId(role) // 929925182796226632
 * ```
 */
declare function extractMentionId(mention: string): string | null;

export { type AnyEmbedData, CustomItents, CustomPartials, type EmbedPlusAssetData, EmbedPlusBuilder, type EmbedPlusData, type EmbedPlusFooterData, type EmbedPlusProperty, chars, createEmbed, createEmbedAsset, createEmbedAuthor, createEmbedFooter, createLinkButton, createModalFields, createModalInput, createRow, extractMentionId, findChannel, findCommand, findEmoji, findMember, findMessage, findRole, getChannelUrlInfo, getMessageUrlInfo, modalFieldsToRecord, setMobileStatus };
