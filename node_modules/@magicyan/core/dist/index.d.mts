export { setTimeout as sleep } from 'node:timers/promises';

type Color = `#${string}` | string;
/**
 * Converts a hexadecimal color string to an RGB number.
 *
 * @param {string} color - The hexadecimal color string.
 * @returns {number} The RGB number representation of the color.
 *
 */
declare function hexToRgb(color: Color): number;
/**
 * Converts an RGB number to a hexadecimal color string.
 *
 * @param {number} rgb - The RGB number.
 * @param {boolean} includeHash - Whether to include '#' in the output. Default is true.
 * @returns {string} The hexadecimal color string.
 */
declare function rgbToHex(rgb: number, includeHash?: boolean): string;

/**
 * Just returns null
 * @returns null
 */
declare function toNull(): null;
/**
 * Receives a possibly null value and returns the value or undefined if falsy
 * @param value Any value
 * @returns
 */
declare function notFound<T>(value: T): T & {} | undefined;
/**
 * Creates text with a line break
 * @param text String Array
 * @returns string
 * ```ts
 * const text = brBuilder("Hello world", "This is javascript!")
 * console.log(text)
 * // Hello world
 * // This is javascript
 * ```
 */
declare function brBuilder(...text: (string | string[])[]): string;
/**
 * Creates text with a spaces
 * @param text String array
 * @returns string
 * ```ts
 * const adm = "Rincko";
 * const action = "promoted"
 * const text = spaceBuilder("Administrator", adm, "has been", action)
 * console.log(text) // Administrator Rincko has been promoted
 * ```
 */
declare function spaceBuilder(...text: (string | string[])[]): string;
/**
 * Replace the text with object variables
 * @param text
 * @param replaces
 * @returns
 *
 * @example
 * ```ts
 * // lang.json
 * {
 *     "welcome": {
 *         "en-US": "Hi var(name), welcome to var(libname) lib",
 *         "pt-BR": "Olá var(name), seja bem vindo à lib var(libname)"
 *     }
 * }
 * // command.ts
 * import lang from "./lang"
 * // ...
 * replaceText(lang.welcome[locale], {
 *     "var(name)": user.displayName,
 *     "var(libname)": lib.getName()
 * })
 * ```
 */
declare function replaceText<R extends Record<string, any>>(text: string, replaces: R): string;
/**
 * Capitalizes the first letter of a word and converts the remaining letters to lowercase.
 *
 * @param {string} word - The word to be capitalized.
 * @param {string} allWords - Whether all words should be capitalized
 * @returns {string} The capitalized word.
 *
 * @example
 * ```ts
 * const capitalizedWord = capitalize("hello");
 * console.log(capitalizedWord); // Output: "Hello"
 *
 * const capitalizedText = capitalize("i love brazil", true);
 * console.log(capitalizedText); // Output: "I Love Brazil"
 * ```
 */
declare function captalize(word: string, allWords?: boolean): string;
declare function limitText(text: string, maxLength: number, endText?: string): string;

declare function randomNumber(min: number, max: number): number;
declare const random: {
    int(min: number, max: number): number;
    float(min: number, max: number): number;
};
declare function parseIntOrDefault(value: string, defaultValue: number, radix?: number): number;
declare function parseFloatOrDefault(value: string, defaultValue: number): number;

interface CreateIntervalOptions {
    time: number;
    run(stop: () => void): void;
}
declare function createInterval(options: CreateIntervalOptions): {
    timer: NodeJS.Timeout;
    stop: () => void;
};
interface CreateTimeoutOptions {
    delay: number;
    run(): void;
}
declare function createTimeout(options: CreateTimeoutOptions): {
    timer: NodeJS.Timeout;
    stop: () => void;
};
interface CreateLoopIntervalOptions<T> {
    array: T[];
    time: number;
    run(value: T, stop: () => void, lap: number, array: T[]): void;
}
declare function createLoopInterval<T>(options: CreateLoopIntervalOptions<T>): {
    timer: NodeJS.Timeout;
    stop: () => void;
};

/**
 * Compares two strings ignoring case sensitivity
 * @param text1 Text 1
 * @param text2 Text 2
 * @returns Boolean
 */
declare function equalsIgnoreCase(text1: string, text2: string): boolean;
declare function includesIgnoreCase(text: string, includeText: string): boolean;

declare function isEmail(email: string): boolean;
declare function isUrl(url: string): boolean;
declare function isNumeric(text: string): boolean;

type ObjectRecord = Record<string | number | symbol, any>;
declare function copyObject<T extends ObjectRecord>(object: T): T;
type MergedObject<T, U> = {
    [K in Exclude<keyof T, keyof U>]: T[K];
} & U;
declare function toMergeObject<T extends ObjectRecord, U extends ObjectRecord>(obj1: T, obj2: U): MergedObject<T, U>;
declare function mergeObject<T extends ObjectRecord, U extends ObjectRecord>(obj1: T, obj2: U): asserts obj1 is MergedObject<T, U>;

export { brBuilder, captalize, copyObject, createInterval, createLoopInterval, createTimeout, equalsIgnoreCase, hexToRgb, includesIgnoreCase, isEmail, isNumeric, isUrl, limitText, mergeObject, notFound, parseFloatOrDefault, parseIntOrDefault, random, randomNumber, replaceText, rgbToHex, spaceBuilder, toMergeObject, toNull };
